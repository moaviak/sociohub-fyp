// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                      String    @id @default(uuid())
  firstName               String
  lastName                String
  email                   String    @unique
  registrationNumber      String    @unique
  password                String
  avatar                  String?
  refreshToken            String?
  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  joinRequests  JoinRequest[]           @relation
  societies     StudentSociety[]        @relation
  notifications NotificationRecipient[] @relation("StudentNotifications")
  eventRegistrations EventRegistration[]
  scannedTickets EventTicket[] @relation("ScannedByStudent")
}

model Advisor {
  id                      String                  @id @default(uuid())
  firstName               String
  lastName                String
  displayName             String
  email                   String                  @unique
  password                String
  avatar                  String?
  phone                   String?                 @unique
  refreshToken            String?
  isEmailVerified         Boolean                 @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  societyId               String?                 @unique
  society                 Society?                @relation(fields: [societyId], references: [id], onDelete: SetNull)
  notifications           NotificationRecipient[] @relation("AdvisorNotifications")

  @@index([societyId])
}

model Society {
  id                  String  @id @default(uuid())
  name                String  @unique
  description         String
  logo                String?
  membersLimit        Int     @default(40)
  acceptingNewMembers Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  advisor      Advisor?         @relation
  roles        Role[]
  joinRequests JoinRequest[]    @relation
  members      StudentSociety[] @relation
  events       Event[]          @relation
  announcements Announcement[] @relation
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model JoinRequest {
  id               String            @id @default(uuid())
  studentId        String
  societyId        String
  reason           String
  expectations     String
  skills           String?
  whatsappNo       String
  semester         Int
  interestedRoleId String?
  status           JoinRequestStatus @default(PENDING)
  pdf              String?
  rejectionReason  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student        Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  society        Society @relation(fields: [societyId], references: [id], onDelete: Cascade)
  interestedRole Role?   @relation(fields: [interestedRoleId], references: [id], onDelete: SetNull)
}

model Role {
  id          String  @id @default(uuid())
  societyId   String
  name        String
  description String?
  minSemester Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  JoinRequest        JoinRequest[]
  StudentSocietyRole StudentSocietyRole[]
  privileges         Privilege[]          @relation("RolePrivileges")
  society            Society              @relation(fields: [societyId], references: [id])
  StudentSociety     StudentSociety[]

  @@unique([societyId, name])
}

model Privilege {
  id          String   @id @default(uuid())
  key         String   @unique
  title       String
  description String?
  roles       Role[]   @relation("RolePrivileges")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentSociety {
  studentId        String
  societyId        String
  interestedRoleId String?

  student        Student @relation(fields: [studentId], references: [id])
  society        Society @relation(fields: [societyId], references: [id])
  interestedRole Role?   @relation(fields: [interestedRoleId], references: [id], onDelete: Cascade)

  // Each membership can have multiple roles.
  roles StudentSocietyRole[]

  createdAt DateTime @default(now())

  @@id([studentId, societyId])
}

model StudentSocietyRole {
  studentId String
  societyId String
  roleId    String

  studentSociety StudentSociety @relation(fields: [studentId, societyId], references: [studentId, societyId])
  role           Role           @relation(fields: [roleId], references: [id])

  @@id([studentId, societyId, roleId])
}

model SocietyAdvisor {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  displayName String
  email       String   @unique
  society     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to recipients
  recipients NotificationRecipient[]
}

model NotificationRecipient {
  id                String    @id @default(uuid())
  notificationId    String
  recipientType     String // "student" or "advisor"
  studentId         String? // ID of the student (null for advisor notifications)
  advisorId         String? // ID of the advisor (null for student notifications)
  webRedirectUrl    String?
  mobileRedirectUrl String?
  isRead            Boolean   @default(false)
  isDeleted         Boolean   @default(false)
  readAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relation to notification
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  // Relations to recipient types
  student Student? @relation("StudentNotifications", fields: [studentId], references: [id], onDelete: Cascade)
  advisor Advisor? @relation("AdvisorNotifications", fields: [advisorId], references: [id], onDelete: Cascade)

  @@unique([notificationId, studentId, advisorId])
  @@index([notificationId])
  @@index([recipientType])
  @@index([studentId])
  @@index([advisorId])
}

enum EventCategories {
  Workshop
  Seminar
  SocialGathering
  Competition
  CulturalEvent
  SportsEvent
  Meeting
  Other
}

enum EventType {
  Physical
  Online
}

enum EventAudience {
  Open
  Members
  Invite
}

enum EventVisibility {
  Publish
  Draft
  Schedule
}

enum PaymentMethods {
  CreditCard
  Easypaisa
}

enum EventStatus {
  Upcoming
  Ongoing
  Completed
  Cancelled
}

model Event {
  id                   String            @id @default(uuid())
  title                String
  tagline              String?
  description          String?
  categories           EventCategories[]
  banner               String?
  startDate            DateTime?
  endDate              DateTime?
  startTime            String? // HH:MM (24-Hour Format)
  endTime              String? // HH:MM (24-Hour Format)
  eventType            EventType?
  venueName            String?
  venueAddress         String?
  platform             String?
  meetingLink          String?
  accessInstructions   String?
  audience             EventAudience?
  visibility           EventVisibility?
  publishDateTime      DateTime?
  registrationRequired Boolean?          @default(false)
  registrationDeadline DateTime?
  maxParticipants      Int?
  paidEvent            Boolean?          @default(false)
  ticketPrice          Int?
  paymentMethods       PaymentMethods[]
  announcementEnabled  Boolean?          @default(false)
  announcement         String?
  status               EventStatus?
  isDraft              Boolean           @default(false)
  formStep             Int?

  societyId String
  society   Society @relation(fields: [societyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventRegistrations EventRegistration[]

  @@index([societyId])
}

model EventRegistration {
  id            String   @id @default(uuid())
  studentId     String
  eventId       String
  registeredAt  DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticket  EventTicket?

  @@unique([studentId, eventId]) // Prevent duplicate registration
  @@index([eventId])
  @@index([studentId])
}

model EventTicket {
  id            String   @id @default(uuid())
  registrationId String  @unique
  qrCode        String   // Store QR code data or URL
  issuedAt      DateTime @default(now())
  scannedAt     DateTime?
  isScanned     Boolean  @default(false)
  scannedBy     String?  // Student ID who scanned (admin)

  // Relations
  registration EventRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  scannedByStudent Student? @relation("ScannedByStudent", fields: [scannedBy], references: [id])

  @@index([isScanned])
}

enum AnnouncementAudience {
  All
  Members
}

model Announcement {
  id String @id @default(uuid())
  title String 
  content String
  publishDateTime DateTime?
  audience AnnouncementAudience @default(All)
  sendEmail Boolean @default(false)
  societyId String

  society Society @relation(fields: [societyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}