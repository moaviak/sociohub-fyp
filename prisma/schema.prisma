// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                      String    @id @default(uuid())
  firstName               String
  lastName                String
  email                   String    @unique
  registrationNumber      String    @unique
  password                String
  avatar                  String?
  refreshToken            String?
  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  joinRequests JoinRequest[]    @relation
  societies    StudentSociety[] @relation
}

model Advisor {
  id                      String    @id @default(uuid())
  firstName               String
  lastName                String
  displayName             String
  email                   String    @unique
  password                String
  avatar                  String?
  phone                   String?   @unique
  refreshToken            String?
  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  societyId               String?   @unique
  society                 Society?  @relation(fields: [societyId], references: [id], onDelete: SetNull)

  @@index([societyId])
}

model Society {
  id                  String  @id @default(uuid())
  name                String  @unique
  description         String
  logo                String?
  membersLimit        Int     @default(40)
  acceptingNewMembers Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  advisor      Advisor?         @relation
  roles        Role[]
  joinRequests JoinRequest[]    @relation
  members      StudentSociety[] @relation
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model JoinRequest {
  id               String            @id @default(uuid())
  studentId        String
  societyId        String
  reason           String
  expectations     String
  skills           String?
  whatsappNo       String
  semester         Int
  interestedRoleId String?
  status           JoinRequestStatus @default(PENDING)
  pdf              String?
  rejectionReason  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student        Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  society        Society @relation(fields: [societyId], references: [id], onDelete: Cascade)
  interestedRole Role?   @relation(fields: [interestedRoleId], references: [id], onDelete: SetNull)
}

model Role {
  id          String  @id @default(uuid())
  societyId   String
  name        String
  description String?
  minSemester Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  JoinRequest        JoinRequest[]
  StudentSocietyRole StudentSocietyRole[]
  privileges         Privilege[]          @relation("RolePrivileges")
  society            Society              @relation(fields: [societyId], references: [id])
  StudentSociety     StudentSociety[]

  @@unique([societyId, name])
}

model Privilege {
  id          String   @id @default(uuid())
  key         String   @unique
  title       String
  description String?
  roles       Role[]   @relation("RolePrivileges")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentSociety {
  studentId        String
  societyId        String
  interestedRoleId String?

  student        Student @relation(fields: [studentId], references: [id])
  society        Society @relation(fields: [societyId], references: [id])
  interestedRole Role?   @relation(fields: [interestedRoleId], references: [id], onDelete: Cascade)

  // Each membership can have multiple roles.
  roles StudentSocietyRole[]

  createdAt DateTime @default(now())

  @@id([studentId, societyId])
}

model StudentSocietyRole {
  studentId String
  societyId String
  roleId    String

  studentSociety StudentSociety @relation(fields: [studentId, societyId], references: [studentId, societyId])
  role           Role           @relation(fields: [roleId], references: [id])

  @@id([studentId, societyId, roleId])
}

model SocietyAdvisor {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  displayName String
  email       String   @unique
  society     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
