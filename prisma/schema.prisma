// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id                 String  @id @default(uuid())
  firstName          String
  lastName           String
  email              String  @unique
  registrationNumber String  @unique
  password           String
  avatar             String?
  bio                String?
  phone              String? @unique

  refreshToken            String?
  isEmailVerified         Boolean   @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  joinRequests        JoinRequest[]           @relation
  societies           StudentSociety[]        @relation
  notifications       NotificationRecipient[] @relation("StudentNotifications")
  eventRegistrations  EventRegistration[]
  scannedTickets      EventTicket[]           @relation("ScannedByStudent")
  tasks               Task[]                  @relation
  MeetingParticipant  MeetingParticipant[]
  MeetingInvitation   MeetingInvitation[]
  Meeting             Meeting[]               @relation("MeetingHostStudent")
  paymentTransactions PaymentTransaction[]

  // Team-related relations
  teamLeaderships   Team[]            @relation("TeamLead")
  teamMemberships   TeamMember[]      @relation("TeamMemberships")
  teamJoinRequests  TeamJoinRequest[] @relation("TeamJoinRequests")
  teamInvitations   TeamInvitation[]  @relation("TeamInvitations")
  assignedTeamTasks TeamTask[]        @relation("AssignedTeamTasks")

  user         User?
  activityLogs ActivityLog[]
  pushTokens   PushToken[]
}

model Advisor {
  id          String  @id @default(uuid())
  firstName   String
  lastName    String
  displayName String
  email       String  @unique
  password    String
  avatar      String?
  bio         String?
  phone       String? @unique

  refreshToken            String?
  isEmailVerified         Boolean                 @default(false)
  emailVerificationCode   String?
  emailVerificationExpiry DateTime?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  societyId               String?                 @unique
  society                 Society?                @relation(fields: [societyId], references: [id], onDelete: SetNull)
  notifications           NotificationRecipient[] @relation("AdvisorNotifications")
  tasks                   Task[]                  @relation
  Meeting                 Meeting[]               @relation("MeetingHostAdvisor")
  MeetingParticipant      MeetingParticipant[]
  MeetingInvitation       MeetingInvitation[]

  user       User?
  userId     String?     @unique
  TeamTask   TeamTask[]
  pushTokens PushToken[]

  @@index([societyId])
}

enum DevicePlatform {
  ANDROID
  IOS
  WEB
  EXPO // expo-specific tokens
  UNKNOWN
}

model PushToken {
  id         String         @id @default(cuid())
  token      String         @unique // the push token (Expo token / FCM / Web push key)
  deviceId   String?        @unique // optional device identifier (UUID/device serial)
  platform   DevicePlatform @default(EXPO)
  // Polymorphic-style relations â€” exactly one of studentId / advisorId should be set (enforced at app or DB level)
  student    Student?       @relation(fields: [studentId], references: [id])
  studentId  String?
  advisor    Advisor?       @relation(fields: [advisorId], references: [id])
  advisorId  String?
  isActive   Boolean        @default(true) // mark inactive on logout/uninstall if desired
  lastUsedAt DateTime?
  meta       Json? // any extra device/app info (OS version, app version, locale)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@unique([studentId, deviceId, token])
  @@unique([advisorId, deviceId, token])
  @@index([studentId])
  @@index([advisorId])
  @@index([studentId, deviceId])
  @@index([advisorId, deviceId])
  @@map("push_tokens")
}

model Society {
  id                  String  @id @default(uuid())
  name                String  @unique
  description         String
  statementOfPurpose  String?
  advisorMessage      String?
  mission             String?
  coreValues          String?
  logo                String?
  membersLimit        Int     @default(40)
  acceptingNewMembers Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  advisor       Advisor?         @relation
  roles         Role[]
  joinRequests  JoinRequest[]    @relation
  members       StudentSociety[] @relation
  events        Event[]          @relation
  announcements Announcement[]   @relation

  tasksAssigned Task[]
  Meeting       Meeting[]
  paymentConfig SocietyPaymentConfig?
  chat          Chat?
  posts         Post[]
  teams         Team[]
  activityLogs  ActivityLog[]
}

// Society Payment Configuration
model SocietyPaymentConfig {
  id                    String    @id @default(uuid())
  societyId             String    @unique
  stripeAccountId       String    @unique // Stripe Connect Account ID
  isOnboarded           Boolean   @default(false)
  onboardingCompletedAt DateTime?
  accountType           String? // "standard" or "express"
  chargesEnabled        Boolean   @default(false)
  payoutsEnabled        Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  society Society @relation(fields: [societyId], references: [id], onDelete: Cascade)

  @@index([societyId])
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model JoinRequest {
  id               String            @id @default(uuid())
  studentId        String
  societyId        String
  reason           String
  expectations     String
  skills           String?
  whatsappNo       String
  semester         Int
  interestedRoleId String?
  status           JoinRequestStatus @default(PENDING)
  pdf              String?
  rejectionReason  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student        Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  society        Society @relation(fields: [societyId], references: [id], onDelete: Cascade)
  interestedRole Role?   @relation(fields: [interestedRoleId], references: [id], onDelete: SetNull)
}

model Role {
  id          String  @id @default(uuid())
  societyId   String
  name        String
  description String?
  minSemester Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  JoinRequest        JoinRequest[]
  StudentSocietyRole StudentSocietyRole[]
  privileges         Privilege[]          @relation("RolePrivileges")
  society            Society              @relation(fields: [societyId], references: [id])
  StudentSociety     StudentSociety[]

  @@unique([societyId, name])
}

model Privilege {
  id          String   @id @default(uuid())
  key         String   @unique
  title       String
  description String?
  roles       Role[]   @relation("RolePrivileges")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudentSociety {
  studentId        String
  societyId        String
  interestedRoleId String?

  student        Student @relation(fields: [studentId], references: [id])
  society        Society @relation(fields: [societyId], references: [id])
  interestedRole Role?   @relation(fields: [interestedRoleId], references: [id], onDelete: Cascade)

  // Each membership can have multiple roles.
  roles StudentSocietyRole[]

  createdAt DateTime @default(now())

  @@id([studentId, societyId])
}

model StudentSocietyRole {
  studentId String
  societyId String
  roleId    String

  studentSociety StudentSociety @relation(fields: [studentId, societyId], references: [studentId, societyId])
  role           Role           @relation(fields: [roleId], references: [id])

  @@id([studentId, societyId, roleId])
}

model SocietyAdvisor {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  displayName String
  email       String   @unique
  society     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to recipients
  recipients NotificationRecipient[]
}

model NotificationRecipient {
  id                String    @id @default(uuid())
  notificationId    String
  recipientType     String // "student" or "advisor"
  studentId         String? // ID of the student (null for advisor notifications)
  advisorId         String? // ID of the advisor (null for student notifications)
  webRedirectUrl    String?
  mobileRedirectUrl String?
  isRead            Boolean   @default(false)
  isDeleted         Boolean   @default(false)
  readAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relation to notification
  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  // Relations to recipient types
  student Student? @relation("StudentNotifications", fields: [studentId], references: [id], onDelete: Cascade)
  advisor Advisor? @relation("AdvisorNotifications", fields: [advisorId], references: [id], onDelete: Cascade)

  @@unique([notificationId, studentId, advisorId])
  @@index([notificationId])
  @@index([recipientType])
  @@index([studentId])
  @@index([advisorId])
}

enum EventCategories {
  Workshop
  Seminar
  SocialGathering
  Competition
  CulturalEvent
  SportsEvent
  Meeting
  Other
}

enum EventType {
  Physical
  Online
}

enum EventAudience {
  Open
  Members
  Invite
}

enum EventVisibility {
  Publish
  Draft
  Schedule
}

enum EventStatus {
  Upcoming
  Ongoing
  Completed
  Cancelled
}

model Event {
  id                   String            @id @default(uuid())
  title                String
  tagline              String?
  description          String?
  categories           EventCategories[]
  banner               String?
  startDate            DateTime?
  endDate              DateTime?
  startTime            String? // HH:MM (24-Hour Format)
  endTime              String? // HH:MM (24-Hour Format)
  eventType            EventType?
  venueName            String?
  venueAddress         String?
  platform             String?
  meetingLink          String?
  accessInstructions   String?
  audience             EventAudience?
  visibility           EventVisibility?
  publishDateTime      DateTime?
  registrationRequired Boolean?          @default(false)
  registrationDeadline DateTime?
  maxParticipants      Int?
  paidEvent            Boolean?          @default(false)
  ticketPrice          Int?
  announcementEnabled  Boolean?          @default(false)
  announcement         String?
  status               EventStatus?
  isDraft              Boolean           @default(false)
  formStep             Int?

  societyId String
  society   Society @relation(fields: [societyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventRegistrations  EventRegistration[]
  eventAnnouncement   Announcement?        @relation("EventAnnouncement")
  paymentTransactions PaymentTransaction[]
  galleryPosts        Post[]

  @@index([societyId])
}

enum RegistrationStatus {
  PENDING
  APPROVED
  DECLINED
}

model EventRegistration {
  id           String             @id @default(uuid())
  studentId    String
  eventId      String
  registeredAt DateTime?
  status       RegistrationStatus @default(PENDING)

  // Relations
  student            Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  event              Event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticket             EventTicket?
  paymentTransaction PaymentTransaction?

  @@unique([studentId, eventId]) // Prevent duplicate registration
  @@index([eventId])
  @@index([studentId])
}

model EventTicket {
  id             String    @id @default(uuid())
  registrationId String    @unique
  qrCode         String // Store QR code data or URL
  issuedAt       DateTime  @default(now())
  scannedAt      DateTime?
  isScanned      Boolean   @default(false)
  scannedBy      String? // Student ID who scanned (admin)

  // Relations
  registration     EventRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  scannedByStudent Student?          @relation("ScannedByStudent", fields: [scannedBy], references: [id])

  @@index([isScanned])
}

// Payment related enums
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
}

// Payment Transactions
model PaymentTransaction {
  id             String @id @default(uuid())
  eventId        String
  studentId      String
  registrationId String @unique

  // Stripe Details
  stripeCheckoutSessionId String? @unique
  stripePaymentIntentId   String? @unique
  stripeTransferId        String?

  // Payment Details
  amount        Int
  currency      String        @default("PKR")
  paymentMethod PaymentMethod @default(CARD)
  status        PaymentStatus @default(PENDING)

  // Metadata
  description  String?
  receiptEmail String?
  metadata     Json?

  // Fees and Transfers
  applicationFeeAmount Int?
  transferAmount       Int? // Amount transferred to society

  // Timestamps
  paidAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  event        Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  student      Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)
  registration EventRegistration? @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([studentId])
  @@index([status])
  @@index([createdAt])
}

// Payment Webhooks Log
model PaymentWebhookLog {
  id            String   @id @default(uuid())
  eventType     String
  stripeEventId String   @unique
  processed     Boolean  @default(false)
  data          Json
  error         String?
  createdAt     DateTime @default(now())

  @@index([eventType])
  @@index([processed])
}

enum AnnouncementAudience {
  All
  Members
  Teams
}

enum AnnouncementStatus {
  Publish
  Schedule
}

model Announcement {
  id              String               @id @default(uuid())
  title           String
  content         String
  publishDateTime DateTime?
  status          AnnouncementStatus
  audience        AnnouncementAudience @default(All)
  sendEmail       Boolean              @default(false)
  societyId       String
  targetTeamIds   String[]             @default([])

  society Society @relation(fields: [societyId], references: [id], onDelete: Cascade)

  // Optional relation to Event
  event   Event?  @relation("EventAnnouncement", fields: [eventId], references: [id], onDelete: SetNull)
  eventId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(uuid())
  description String
  isStarred   Boolean  @default(false)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdByStudentId String?
  createdByAdvisorId String?
  createdByStudent   Student? @relation(fields: [createdByStudentId], references: [id])
  createdByAdvisor   Advisor? @relation(fields: [createdByAdvisorId], references: [id])

  assignedBySocietyId String?
  assignedBySociety   Society? @relation(fields: [assignedBySocietyId], references: [id])
  assignedByTeamId    String?
  assignedByTeam      Team?    @relation(fields: [assignedByTeamId], references: [id])

  @@index([createdByStudentId])
  @@index([createdByAdvisorId])
  @@index([assignedBySocietyId])
  @@index([assignedByTeamId])
}

model Meeting {
  id          String    @id @default(cuid())
  title       String
  description String?
  meetingCode String    @unique
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?

  dailyRoomUrl  String? // Daily room URL
  dailyRoomName String? // Daily room name

  hostAdvisorId String?
  hostStudentId String?
  hostSocietyId String

  audienceType     AudienceType @default(ALL_SOCIETY_MEMBERS)
  maxParticipants  Int?
  recordingEnabled Boolean      @default(false)

  // Add Daily-specific fields
  dailyRoomConfig Json? // Store room configuration
  recordingStatus RecordingStatus @default(NOT_STARTED)

  status    MeetingStatus @default(SCHEDULED)
  expiry    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  hostAdvisor  Advisor?             @relation("MeetingHostAdvisor", fields: [hostAdvisorId], references: [id])
  hostStudent  Student?             @relation("MeetingHostStudent", fields: [hostStudentId], references: [id])
  hostSociety  Society              @relation(fields: [hostSocietyId], references: [id])
  participants MeetingParticipant[]
  invitations  MeetingInvitation[]

  @@map("meetings")
}

model MeetingParticipant {
  id        String  @id @default(cuid())
  meetingId String
  studentId String?
  advisorId String?

  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  // Replace sessionId with dailySessionId
  dailySessionId String? // Daily session ID

  role      ParticipantRole @default(PARTICIPANT)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  meeting Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  student Student? @relation(fields: [studentId], references: [id])
  advisor Advisor? @relation(fields: [advisorId], references: [id])

  @@unique([meetingId, studentId])
  @@unique([meetingId, advisorId])
  @@map("meeting_participants")
}

enum RecordingStatus {
  NOT_STARTED
  RECORDING
  STOPPED
  PROCESSING
  COMPLETED
  FAILED
}

enum MeetingStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

enum AudienceType {
  ALL_SOCIETY_MEMBERS
  SPECIFIC_MEMBERS
}

enum ParticipantRole {
  HOST
  PARTICIPANT
}

model MeetingInvitation {
  id        String   @id @default(cuid())
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)
  studentId String?
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)
  advisorId String?
  advisor   Advisor? @relation(fields: [advisorId], references: [id], onDelete: Cascade)

  status InvitationStatus @default(PENDING)
  sentAt DateTime         @default(now())

  @@unique([meetingId, studentId])
  @@unique([meetingId, advisorId])
  @@map("meeting_invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// =================================================================================
// CHAT FEATURE MODELS
// =================================================================================

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum ChatType {
  ONE_ON_ONE
  GROUP
}

model User {
  id        String   @id @default(cuid())
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique
  advisor   Advisor? @relation(fields: [advisorId], references: [id])
  advisorId String?  @unique

  // For chat
  chats        Chat[]    @relation("ChatParticipants")
  messages     Message[]
  adminOfChats Chat[]    @relation("AdminOfChats")
  readMessages Message[] @relation("ReadMessages")

  // Fields for online status and last seen
  isOnline Boolean   @default(false)
  lastSeen DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts    Post[]
  likes    PostLike[]
  comments PostComment[]
}

model Chat {
  id        String   @id @default(cuid())
  name      String?
  type      ChatType @default(ONE_ON_ONE)
  chatImage String?

  // The society this chat belongs to (for primary society chats)
  society   Society? @relation(fields: [societyId], references: [id])
  societyId String?  @unique // A society can only have one primary chat

  Team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId String? @unique // A team can have one chat

  participants User[]    @relation("ChatParticipants")
  messages     Message[]

  // The user who created the chat (especially for group chats)
  admin   User?   @relation("AdminOfChats", fields: [adminId], references: [id])
  adminId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([societyId])
  @@index([teamId])
}

model Message {
  id          String       @id @default(cuid())
  content     String?
  chat        Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId      String
  sender      User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  attachments Attachment[]

  // For unread message tracking
  readBy User[] @relation("ReadMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
}

model Attachment {
  id        String         @id @default(cuid())
  message   Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  name      String?
  size      Int?
  url       String
  type      AttachmentType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
}

// =================================================================================
// CMS (Content Management System) FEATURE MODELS
// =================================================================================

enum PostType {
  NORMAL
  EVENT_GALLERY
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  type      PostType @default(NORMAL)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  society   Society  @relation(fields: [societyId], references: [id], onDelete: Cascade)
  societyId String
  event     Event?   @relation(fields: [eventId], references: [id], onDelete: SetNull)
  eventId   String?

  media    PostMedia[]
  likes    PostLike[]
  comments PostComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([societyId])
  @@index([eventId])
}

model PostMedia {
  id     String @id @default(cuid())
  url    String
  type   String // e.g., "IMAGE", "VIDEO"
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
}

model PostLike {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostComment {
  id       String        @id @default(cuid())
  content  String
  post     Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String
  author   User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  parent   PostComment?  @relation("Replies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  replies  PostComment[] @relation("Replies")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

// =================================================================================
// TEAM MODULE ADDITIONS - Add these models to your existing schema
// =================================================================================

enum TeamJoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TeamTaskStatus {
  TO_DO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamVisibility {
  PUBLIC // Anyone in society can see and request to join
  PRIVATE // Only invited members can see and join
}

// Core Team Model
model Team {
  id          String         @id @default(uuid())
  name        String
  description String?
  logo        String? // Team logo/avatar
  visibility  TeamVisibility @default(PUBLIC)
  societyId   String
  leadId      String? // Team Lead (Student ID)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  society      Society           @relation(fields: [societyId], references: [id], onDelete: Cascade)
  lead         Student?          @relation("TeamLead", fields: [leadId], references: [id], onDelete: SetNull)
  members      TeamMember[]
  joinRequests TeamJoinRequest[]
  invitations  TeamInvitation[]
  teamTasks    TeamTask[]
  Task         Task[]
  chat         Chat?

  @@unique([societyId, name]) // Team names must be unique within a society
  @@index([societyId])
  @@index([leadId])
}

// Team Membership
model TeamMember {
  id        String @id @default(uuid())
  teamId    String
  studentId String

  joinedAt DateTime @default(now())

  // Relations
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  student Student @relation("TeamMemberships", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamId, studentId]) // Prevent duplicate memberships
  @@index([teamId])
  @@index([studentId])
}

// Team Join Requests
model TeamJoinRequest {
  id        String                @id @default(uuid())
  teamId    String
  studentId String
  status    TeamJoinRequestStatus @default(PENDING)
  message   String? // Optional message from student

  // Response details
  respondedById String? // Who approved/rejected (Student or Advisor)
  responseNote  String? // Optional note from responder
  respondedAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  student Student @relation("TeamJoinRequests", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamId, studentId]) // One active request per student per team
  @@index([teamId])
  @@index([studentId])
  @@index([status])
}

// Team Invitations (sent by Team Lead or Society Admin)
model TeamInvitation {
  id          String                @id @default(uuid())
  teamId      String
  studentId   String
  invitedById String // Who sent the invitation (Student or Advisor)
  status      TeamJoinRequestStatus @default(PENDING)
  message     String? // Optional message from inviter

  respondedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  student Student @relation("TeamInvitations", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([teamId, studentId]) // One active invitation per student per team
  @@index([teamId])
  @@index([studentId])
  @@index([status])
}

// Team-Level Tasks (Assigned by Society Advisor/Privileged Members)
model TeamTask {
  id          String         @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?
  status      TeamTaskStatus @default(TO_DO)

  teamId              String
  assignedById        String? // Student ID (Privileged Member)
  assignedByAdvisorId String? // Advisor ID if assigned by advisor

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  assignedBy Student? @relation("AssignedTeamTasks", fields: [assignedById], references: [id], onDelete: SetNull)
  Advisor    Advisor? @relation(fields: [advisorId], references: [id])
  advisorId  String?

  @@index([teamId])
  @@index([assignedById])
  @@index([assignedByAdvisorId])
  @@index([status])
}

model ActivityLog {
  id        String @id @default(cuid())
  studentId String
  societyId String

  // Action Details
  action      String // e.g., "CREATED_EVENT", "REMOVED_MEMBER", "UPDATED_PROFILE"
  description String // Human readable description
  nature      ActionNature

  // Context
  targetId   String? // ID of the affected resource (event, member, etc.)
  targetType String? // Type of resource affected (Event, Member, Announcement, etc.)

  // Metadata
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  society Society @relation(fields: [societyId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([studentId])
  @@index([action])
  @@index([nature])
  @@index([timestamp])
}

enum ActionNature {
  CONSTRUCTIVE // Creating content, adding members, positive contributions
  NEUTRAL // Viewing, reading, routine updates
  DESTRUCTIVE // Deleting, removing, blocking, negative actions
  ADMINISTRATIVE // System admin actions, role changes
}
